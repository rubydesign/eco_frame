.graph_app
  .post_control
    .rangeslider.height
      %b Truss Height {{frame.truss.height}}
      %input{min:"50", max:"250", step: "5", type:"range" ,
            "v-bind:value":"frame.truss.height",
            "v-on:input":"frame.truss.height = parseInt($event.target.value)"}
    .rangeslider.height
      %b Post Height {{frame.height}}
      %input{min:"100", max:"350", step: "5", type:"range" ,
            "v-bind:value":"frame.height",
            "v-on:input":"frame.height = parseInt($event.target.value)"}
    .rangeslider.width
      %b Width {{frame.width}}
      %input{min:"100", max:"650", step: "10", type:"range" ,
            "v-bind:value":"frame.width",
            "v-on:input":"frame.width = parseInt($event.target.value)"}
    .rangeslider.spacing
      %b Length {{length}}
      %input{min:"100", max:"650", step: "1", type:"range" ,
          "v-bind:value":"frame.spacing",
          "v-on:input":"frame.spacing = parseInt($event.target.value)"}
    .rangeslider.posts
      %b Posts {{frame.posts}}
      %input{min:"2", max:"10", type:"range" ,
            "v-bind:value":"frame.posts",
            "v-on:input":"set_posts(parseInt($event.target.value))"}
    .rangeslider.size
      %b Size {{frame.size}}cm ({{(frame.size/2.5).toFixed(0)}}in)
      %input{min:"10", max:"25", step:"2.5" , type:"range" ,
            "v-bind:value":"frame.size",
            "v-on:input":"frame.size = parseFloat($event.target.value)"}
    .rangeslider
      %div
        %b Braces
        %input{type:"checkbox", "v-model":"frame.braces"}
      %span
        %b Trusses
        %input{type:"checkbox", "v-model":"frame.truss.on"}
      %div
        %b Length
        {{length}}
      %div
        %b Cubic meters:
        {{cubes}}
    .up
      %b div {{div}}
      %input{min:"0.5", max:"5", step: "0.1", type:"range" ,
            "v-bind:value":"div",
            "v-on:input":"div = parseFloat($event.target.value)"}


  .front{ ":style":"`height: ${frame.height + frame.truss.height}px; margin-left: ${1150 - frame.width}px;`" }
    .child{ "v-for":"i in frame.posts" ,
            ":style":"transform_post(i)"}
      %svg{ ":width":"frame.width + 2" , ":height":"frame_height  ",
              ":mask":"`url(#mask_${frame.truss.on ? 'all':'frame'})`",
            ":viewbox":"'0 0 ' + frame.width + ' ' + frame_height" }
        %defs
          %mask#mask_all
            %polyline{":points":"`${frame.width/2},0 ${frame.width},${frame.truss.height} ${frame.width},${frame.truss.height+frame.height} 0,${frame.truss.height+frame.height}  0,${frame.truss.height}`",
                      ":style":"`fill: rgb(225,225,225);`"}
          %mask#mask_frame
            %polyline{":points":"`${frame.width},0 ${frame.width},${frame.height} 0,${frame.height}  0,0`",
                      ":style":"`fill: rgb(225,225,225);`"}
        %g{ "is":"frame-outline", ":frame":"frame"}
        %g{ "is":"truss-harja", ":frame":"frame"}
        %g{ "is":"brace-outline" , ":frame":"frame" , "v-if":"frame.braces"}

= render "vue/frame_outline"
= render "vue/brace_outline"
= render "vue/truss_harja"

:ruby2js

  class Graph < Vue
    el ".graph_app"
    def initialize
      @div = 5
      @frame = {truss: {height: 120, type: :harja , on: true} , size: 15 , height: 250, spacing: 300,
                width: 300 , posts: 4 , braces: true}
    end
    def transform_post(i)
      posts_max =  500 + self.length * 0.4
      posts_factor = posts_max / @frame.posts
      ret = "transform: translateZ(" +  posts_factor*(i-1)
      ret = ret + "px) rotateY(-25deg);"
      return ret
    end
    def set_posts(num)
      old_length = self.length
      @frame.spacing = Math.floor(old_length / (num - 1))
      @frame.posts = num
    end
    def length
      return @frame.spacing * (@frame.posts - 1 )
    end
    def frame_height
      return @frame.height + @frame.size + (@frame.truss.on ? @frame.truss.height : 0)
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      return @frame.posts * @frame.size * @frame.size * @frame.height
    end
    def plate_cubes
      meters = 2 * self.length
      meters += 2 * @frame.width unless @frame.truss.on
      return @frame.size * @frame.size * meters
    end
    def truss_cubes
      return 0 unless @frame.truss.on
      return @frame.posts * @frame.size * @frame.size * (@frame.width * 2)
    end
  end
