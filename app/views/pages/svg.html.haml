.graph_app
  .post_control
    .rangeslider.height
      %b Height {{frame.height}}
      %input{min:"100", max:"350", step: "5", type:"range" ,
            "v-bind:value":"frame.height",
            "v-on:input":"frame.height = parseInt($event.target.value)"}
    .rangeslider.width
      %b Width {{frame.width}}
      %input{min:"100", max:"650", step: "10", type:"range" ,
            "v-bind:value":"frame.width",
            "v-on:input":"frame.width = parseInt($event.target.value)"}
    .rangeslider.spacing
      %b Spacing {{frame.spacing}}
      %input{min:"100", max:"650", step: "10", type:"range" ,
          "v-bind:value":"frame.spacing",
          "v-on:input":"frame.spacing = parseInt($event.target.value)"}
    .rangeslider.posts
      %b Posts {{frame.posts}}
      %input{min:"2", max:"10", type:"range" ,
            "v-bind:value":"frame.posts",
            "v-on:input":"frame.posts = parseInt($event.target.value)"}
    .rangeslider.size
      %b Size {{frame.size}}cm ({{(frame.size/2.5).toFixed(0)}}in)
      %input{min:"10", max:"25", step:"2.5" , type:"range" ,
            "v-bind:value":"frame.size",
            "v-on:input":"frame.size = parseFloat($event.target.value)"}
    .rangeslider
      %div
        %b Braces
        %input{type:"checkbox", "v-model":"frame.braces"}
      %span
        %b Trusses
        %input{type:"checkbox", "v-model":"frame.trusses"}
    .rangeslider
      %div
        %b Length
        {{length}}
      %div
        %b Cubic meters:
        {{cubes}}
      %b perspective {{perspective}}
      %input{min:"50", max:"1000", step: "10", type:"range" ,
            "v-bind:value":"perspective",
            "v-on:input":"perspective = parseInt($event.target.value)"}
      %b background {{bg}}
      %input{min:"1", max:"255", step: "1", type:"range" ,
            "v-bind:value":"bg",
            "v-on:input":"bg = parseInt($event.target.value)"}

  %svg{ ":width":"frame.width + 2" , ":height":"frame_height ",
        ":viewbox":"'0 0 ' + frame.width + ' ' + frame_height" }
    %defs
      %mask#mask_rest
        %polyline{":points":"`${frame.width/2},0 ${frame.width},${frame.truss_height} ${frame.width},${frame.truss_height+frame.height} 0,${frame.truss_height+frame.height}  0,${frame.truss_height}`",
                  ":style":"`fill: rgb(225,225,225);`"}

  .front{ ":style":"`perspective: ${10*perspective}px;`" }
    .child{ "v-for":"i in frame.posts" ,
            ":style":"`transform: translateZ(${40*i}px) translateY(10px);`"}
      %svg{ ":width":"frame.width + 2" , ":height":"frame_height ",
            ":viewbox":"'0 0 ' + frame.width + ' ' + frame_height" }
        %g.frame{ ":transform":"`translate(0,${frame.truss_height})`"  }
          %rect.frame{ ":width":"frame.width" , ":height":"frame.size" ,
                      ":style":"`fill: rgb(${bg},${bg},${bg});`"}
          %rect.frame{ ":x":"frame.width - frame.size", ":y":"frame.size" ,
                      ":width":"frame.size" , ":height":"frame.height"}
          %rect.frame{ ":x":"0", ":y":"frame.size" ,
                      ":width":"frame.size" , ":height":"frame.height"}
        %g.trusses{"v-if":"frame.trusses"}
          %line{  ":x1": 0 , ":y1":"frame.truss_height" ,
                  ":x2":"frame.width / 2" , ":y2": 0  }
          %line{  ":x1":"frame.width / 2" , ":y1": 0 ,
                  ":x2":"frame.width" , ":y2":"frame.truss_height"  }
          %line{  ":x1":"truss_x" , ":y1":"frame.truss_height" ,
                  ":x2":"frame.width / 2" , ":y2":"truss_y"  }
          %line{  ":x1":"frame.width / 2" , ":y1":"truss_y" ,
                  ":x2":"frame.width - truss_x" , ":y2":"frame.truss_height"  }
          %line{  ":x1":"frame.width/2 - frame.size/2" , ":y1":"hit_y" ,
                  ":x2":"frame.width/2 - frame.size/2" , ":y2":"frame.truss_height"  }
          %line{  ":x1":"frame.width/2 + frame.size/2" , ":y1":"hit_y" ,
                  ":x2":"frame.width/2 + frame.size/2" , ":y2":"frame.truss_height"  }

          %g{ ":transform":"`translate(0,${frame.truss_height})`" }
            %line{  ":x1":"frame.width/ 2 - frame.size/2" ,
                    ":y1":"-frame.size" ,
                    ":x2":"dx" ,
                    ":y2":"-dy"}
            %line{  ":x1":"frame.width/2 + frame.size/2" ,
                    ":y1":"-frame.size" ,
                    ":x2":"frame.width-dx" ,
                    ":y2":"-dy"}
            %line{  ":x1":"frame.width/2 + frame.size/2" ,
                    ":y1":"-frame.size - 0.75*truss_y" ,
                    ":x2":"frame.width - dx - 0.5*truss_x" ,
                    ":y2":"-dy - 0.5*truss_y"}
            %line{  ":x1":"frame.width/2 - frame.size/2" ,
                    ":y1":"-frame.size - 0.75*truss_y" ,
                    ":x2":"dx + 0.5*truss_x" ,
                    ":y2":"-dy - 0.5*truss_y"}
        %g{ ":transform":"`translate(0,${frame.truss_height})`" ,
            "v-if":"frame.braces"}
          %line{  ":x1":"frame.size" ,
                  ":y1":"brace" ,
                  ":x2":"brace" ,
                  ":y2":"frame.size"}
          %line{  ":x1":"frame.size" ,
                  ":y1":"brace + frame.size*1.414" ,
                  ":x2":"brace + frame.size*1.414" ,
                  ":y2":"frame.size"}

          %line{  ":x1":"frame.width - frame.size" ,
                  ":y1":"brace" ,
                  ":x2":"frame.width - brace" ,
                  ":y2":"frame.size"}
          %line{  ":x1":"frame.width - frame.size" ,
                  ":y1":"brace + frame.size*1.414" ,
                  ":x2":"frame.width - brace - frame.size*1.414" ,
                  ":y2":"frame.size"}

:ruby2js

  class Graph < Vue
    el ".graph_app"
    def initialize
      @perspective = 100
      @bg = 100
      @frame = {trusses: true , size: 15 , height: 250, spacing: 300,
                truss_height: 120, width: 300 , posts: 4 , braces: true}
    end
    def slide(event)
      puts event.target.value
    end
    def dx
      return 1.1*@frame.width / 4
    end
    def dy
      return (self.dx - self.truss_x) * Math.tan(angle)
    end
    def brace
      return 3* Math.min(@frame.height, @frame.width/2) / 8
    end
    def moveSize(x,y)
      @frame.spacing = x
      @frame.width = y
    end
    def moveHeight(x,y)
      @frame.truss_height = y
      @frame.height = 2*x
    end
    def angle
      return Math.atan(2*@frame.truss_height / @frame.width)
    end
    def truss_x
      return @frame.size / Math.sin( self.angle)
    end
    def truss_y
      return @frame.size / Math.cos( self.angle)
    end
    def hit_y
      return truss_y + @frame.truss_height - (@frame.width - @frame.size)*0.5*Math.tan(angle)
    end
    def length
      return @frame.spacing * (@frame.posts - 1 )
    end
    def frame_height
      return @frame.height + (@frame.trusses ? @frame.truss_height : 0)
    end
    def posts_positions
      arr = []
      0.upto(@frame.posts - 1){ |i| arr << Math.floor(i * (self.length - @frame.size)/(@frame.posts - 1))}
      arr << self.length - @frame.size
      arr
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      return @frame.posts * @frame.size * @frame.size * @frame.height
    end
    def plate_cubes
      meters = 2 * self.length
      meters += 2 * @frame.width unless @frame.trusses
      return @frame.size * @frame.size * meters
    end
    def truss_cubes
      return 0 unless @frame.trusses
      return @frame.posts * @frame.size * @frame.size * (@frame.width * 2)
    end
  end
