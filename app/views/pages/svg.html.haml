.graph_app
  .stats
    Cubic meters: {{cubes}}
    %br
  %svg.main{ ":width":"total_length" , ":height":"total_width",
        ":viewbox":"'0 0 ' + total_width + ' ' + total_length" , class:  :index_graph}
    %g{ ":transform":"`translate(${frame.spacing -20},${frame.width})`"}
      %text{":x":"-50" , ":y":"-50" }
        %tspan Spacing
        %tspan {{ frame.spacing }}
        %tspan cm
        %tspan{dy: 25 , dx: -80} Drag:
    %g{ ":transform": "`translate(${padd },${-padd})`"}
      %draggable{ ":startx":"frame.spacing" ,":starty":"frame.width" ,
                  "v-on:dragged":"moveSize"}
        %circle{ "r": 10 }

    %g.frame{ ":transform": "`translate(${padd},0)`"}
      %rect.frame{ ":width": "length" , ":height": "frame.width"}
      %template{ "v-for": "pos in posts_positions"}
        %g{ ":transform": "`translate(${pos},0)`" }
          %rect.post{ ":width": "frame.size" , ":height": "frame.size" }
          %line.fine{ ":x1": "0" ,":y1": "0" ,
                      ":x2": "frame.size" , ":y2": "frame.size" }
          %line.fine{ ":x1": "0" ,":y1": "frame.size" ,
                      ":x2": "frame.size" , ":y2": "0" }
          %g{":transform": "`translate(0,${frame.width - frame.size})`"}
            %rect.post{ ":width": "frame.size" , ":height": "frame.size"}
            %line.fine{ ":x1": "0" ,":y1": "0" ,
                        ":x2": "frame.size" , ":y2": "frame.size" }
            %line.fine{ ":x1": "0" ,":y1": "frame.size" ,
                        ":x2": "frame.size" , ":y2": "0" }

    %g.frame{ ":transform":"`translate(${padd - 10 },${total_width - 10})`"}
      %line.slider{ ":x1":"10" ,":y1": "0" ,
                    ":x2":"total_length / 3" , ":y2":"0" }
      %line.slider{ ":x1":"2*length / 3" ,":y1":"0" ,
                    ":x2":"total_length " , ":y2":"0" }
      %text{":x":"total_length / 3 + padd" , ":y":"0" }
        %tspan Length
        %tspan {{ length.toFixed(0) }}
        %tspan cm

    %line.slider{ x1: 2 ,y1: 0 , x2: 2 , ":y2":"frame.width/3" ,
                  "stroke":"rgb(0,0,0)" , "stroke-width": 3}
    %line.slider{ x1: 2 ,":y1":"2*frame.width/3" , x2: 2 , ":y2":"frame.width" ,
                  "stroke":"rgb(0,0,0)" , "stroke-width": 3}
    %text{x: 0 , ":y":"(frame.width - padd ) / 2" }
      %tspan Width
      %tspan{x: 0, dy: 15} {{ frame.width.toFixed(0) }}
      %tspan{x: 0, dy: 15} cm

  .post_control
    %table
      %thead
        %th
        %th Posts
        %th
        %th
        %th Post (cm)
        %th Size (in)
        %th
      %tbody
        %tr
          %td
            %a{ "@click" => "frame.posts -= 1"}
              =image_tag "minus.png"
          %td.center {{frame.posts}}
          %td
            %a{ "@click" => "frame.posts += 1"}
              =image_tag "plus.png"
          %td
            %a{ "@click" => "frame.size -= 2.5"}
              =image_tag "minus.png"
          %td.center {{frame.size}}
          %td.center {{(frame.size /2.5).toFixed(0) }}
          %td
            %a{ "@click" => "frame.size += 2.5"}
              =image_tag "plus.png"
  .front
    %svg{ ":width":"frame.width + 2" , ":height":"frame_height + padd ",
          ":viewbox":"'0 0 ' + frame.width + ' ' + frame_height" }
      %g.frame{ ":transform":"`translate(${0},${2*padd})`"}
        %draggable{ ":startx":"frame.height / 2" ,":starty":"frame.truss_height" ,
                    "v-on:dragged":"moveHeight" }
          %circle{ "r": 10 }
      %g.frame{ ":transform":"`translate(0,${frame.truss_height})`"}
        %rect.frame{ ":width":"frame.width" , ":height":"frame.size"}
        %rect.frame{ ":x":"frame.width - frame.size", ":y":"frame.size" ,
                    ":width":"frame.size" , ":height":"frame.height"}
        %rect.frame{ ":x":"0", ":y":"frame.size" ,
                    ":width":"frame.size" , ":height":"frame.height"}
        %text{":x":"frame.width / 4" , ":y":"padd" }
          %tspan Truss Heigth
          %tspan {{ frame.truss_height.toFixed(0) }}
          %tspan cm
          %tspan{dx: "-50", dy: 20} Height
          %tspan {{ frame.height.toFixed(0) }}
          %tspan{dx: "-50", dy: 20} angle
          %tspan {{ angle }}
      %g{"v-if":"frame.trusses"}
        %line{  ":x1": 0 , ":y1":"frame.truss_height" ,
                ":x2":"frame.width / 2" , ":y2": 0  }
        %line{  ":x1":"frame.width / 2" , ":y1": 0 ,
                ":x2":"frame.width" , ":y2":"frame.truss_height"  }
        %line{  ":x1":"truss_x" , ":y1":"frame.truss_height" ,
                ":x2":"frame.width / 2" , ":y2":"truss_y"  }
        %line{  ":x1":"frame.width / 2" , ":y1":"truss_y" ,
                ":x2":"frame.width - truss_x" , ":y2":"frame.truss_height"  }
        %line{  ":x1":"frame.width/2 - frame.size/2" , ":y1":"hit_y" ,
                ":x2":"frame.width/2 - frame.size/2" , ":y2":"frame.truss_height"  }
        %line{  ":x1":"frame.width/2 + frame.size/2" , ":y1":"hit_y" ,
                ":x2":"frame.width/2 + frame.size/2" , ":y2":"frame.truss_height"  }

        %g{ ":transform":"`translate(0,${frame.truss_height})`" }
          %line{  ":x1":"frame.width/ 2 - frame.size/2" ,
                  ":y1":"-frame.size" ,
                  ":x2":"dx" ,
                  ":y2":"-dy"}
          %line{  ":x1":"frame.width/2 + frame.size/2" ,
                  ":y1":"-frame.size" ,
                  ":x2":"frame.width-dx" ,
                  ":y2":"-dy"}

          %line{  ":x1":"frame.width/2 + frame.size/2" ,
                  ":y1":"-frame.size - 0.75*truss_y" ,
                  ":x2":"frame.width - dx - 0.5*truss_x" ,
                  ":y2":"-dy - 0.5*truss_y"}
          %line{  ":x1":"frame.width/2 - frame.size/2" ,
                  ":y1":"-frame.size - 0.75*truss_y" ,
                  ":x2":"dx + 0.5*truss_x" ,
                  ":y2":"-dy - 0.5*truss_y"}


:ruby2js
  class Graph < Vue
    el ".graph_app"
    def initialize
      @padd = 30
      @frame = {trusses: true , size: 15 , height: 250, spacing: 450,
                truss_height: 120, width: 300 , posts: 3}
    end
    def dx
      return 1.1*@frame.width / 4
    end
    def dy
      return (self.dx - self.truss_x) * Math.tan(angle)
    end
    def moveSize(x,y)
      @frame.spacing = x
      @frame.width = y
    end
    def moveHeight(x,y)
      @frame.truss_height = y
      @frame.height = 2*x
    end
    def angle
      return Math.atan(2*@frame.truss_height / @frame.width)
    end
    def truss_x
      return @frame.size / Math.sin( self.angle)
    end
    def truss_y
      return @frame.size / Math.cos( self.angle)
    end
    def hit_y
      return truss_y + @frame.truss_height - (@frame.width - @frame.size)*0.5*Math.tan(angle)
    end
    def length
      return @frame.spacing * (@frame.posts - 1 )
    end
    def frame_height
      return @frame.height + (@frame.trusses ? @frame.truss_height : 0)
    end
    def posts_positions
      arr = []
      0.upto(@frame.posts - 1){ |i| arr << Math.floor(i * (self.length - @frame.size)/(@frame.posts - 1))}
      arr << self.length - @frame.size
      arr
    end
    def total_width
      return @frame.width + @padd
    end
    def total_length
      return self.length + @padd
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      return @frame.posts * @frame.size * @frame.size * @frame.height
    end
    def plate_cubes
      meters = 2 * self.length
      meters += 2 * @frame.width unless @frame.trusses
      return @frame.size * @frame.size * meters
    end
    def truss_cubes
      return 0 unless @frame.trusses
      return @frame.posts * @frame.size * @frame.size * (@frame.width * 2) #for now
    end
  end
