.graph_app
  .stats
    Cubic meters: {{cubes}}
    %br
  %svg.main{ ":width": "total_length" , ":height": "total_width",
        ":viewbox": "'0 0 ' + total_width + ' ' + total_length" , class:  :index_graph}
    %g{ ":transform": "`translate(${spacing -20},${width})`"}
      %text{":x": "-50" , ":y": "-50" }
        %tspan Spacing
        %tspan {{ spacing }}
        %tspan cm
        %tspan{dy: 25 , dx: -80} Drag:
    %g{ ":transform": "`translate(${padd },${-padd})`"}
      %draggable{ ":model": "size_slider" }
        %circle{ "r": 10 }

    %g.frame{ ":transform": "`translate(${padd},0)`"}
      %rect.frame{ ":width": "length" , ":height": "width"}
      %template{ "v-for": "pos in posts_positions"}
        %g{ ":transform": "`translate(${pos},0)`" }
          %rect.post{ ":width": "frame.size" , ":height": "frame.size" }
          %line.fine{ ":x1": "0" ,":y1": "0" ,
                      ":x2": "frame.size" , ":y2": "frame.size" }
          %line.fine{ ":x1": "0" ,":y1": "frame.size" ,
                      ":x2": "frame.size" , ":y2": "0" }
          %g{":transform": "`translate(0,${width - frame.size})`"}
            %rect.post{ ":width": "frame.size" , ":height": "frame.size"}
            %line.fine{ ":x1": "0" ,":y1": "0" ,
                        ":x2": "frame.size" , ":y2": "frame.size" }
            %line.fine{ ":x1": "0" ,":y1": "frame.size" ,
                        ":x2": "frame.size" , ":y2": "0" }

    %g.frame{ ":transform": "`translate(${padd - 10 },${total_width - 10})`"}
      %line.slider{ ":x1": "10" ,":y1": "0" ,
                    ":x2": "total_length / 3" , ":y2": "0" }
      %line.slider{ ":x1": "2*length / 3" ,":y1": "0" ,
                    ":x2": "total_length " , ":y2": "0" }
      %text{":x": "total_length / 3 + padd" , ":y": "0" }
        %tspan Length
        %tspan {{ length.toFixed(0) }}
        %tspan cm

    %line.slider{ x1: 2 ,y1: 0 , x2: 2 , ":y2": "width/3" ,
                  "stroke": "rgb(0,0,0)" , "stroke-width": 3}
    %line.slider{ x1: 2 ,":y1": "2*width/3" , x2: 2 , ":y2": "width" ,
                  "stroke": "rgb(0,0,0)" , "stroke-width": 3}
    %text{x: 0 , ":y": "(width - padd ) / 2" }
      %tspan Width
      %tspan{x: 0, dy: 15} {{ width.toFixed(0) }}
      %tspan{x: 0, dy: 15} cm

  .post_control
    %table
      %thead
        %th
        %th Posts
        %th
        %th
        %th Post (cm)
        %th Size (in)
        %th
      %tbody
        %tr
          %td
            %a{ "@click" => "frame.posts -= 1"}
              =image_tag "minus.png"
          %td.center {{frame.posts}}
          %td
            %a{ "@click" => "frame.posts += 1"}
              =image_tag "plus.png"
          %td
            %a{ "@click" => "frame.size -= 2.5"}
              =image_tag "minus.png"
          %td.center {{frame.size}}
          %td.center {{(frame.size /2.5).toFixed(0) }}
          %td
            %a{ "@click" => "frame.size += 2.5"}
              =image_tag "plus.png"
  .front
    %svg{ ":width":"width + padd" , ":height":"frame_height + padd",
          ":viewbox":"'0 0 ' + width + ' ' + frame_height" }
      %g{"v-if":"frame.trusses"}
        %line{  ":x1": 0 , ":y1":"truss_height" ,
                ":x2":"width / 2" , ":y2": 0  }
        %line{  ":x1":"width / 2" , ":y1": 0 ,
                ":x2":"width" , ":y2":"truss_height"  }
        %line{  ":x1":"truss_x" , ":y1":"truss_height" ,
                ":x2":"width / 2" , ":y2":"truss_y"  }
        %line{  ":x1":"width / 2" , ":y1":"truss_y" ,
                ":x2":"width - truss_x" , ":y2":"truss_height"  }

      %g.frame{ ":transform":"`translate(0,${truss_height})`"}
        %rect.frame{ ":width":"width" , ":height":"frame.size"}
        %rect.frame{ ":x":"width - frame.size", ":y": "frame.size" ,
                    ":width":"frame.size" , ":height": "frame.height"}
        %rect.frame{ ":x":"0", ":y":"frame.size" ,
                    ":width":"frame.size" , ":height":"frame.height"}
        %text{":x": "width / 4" , ":y": "padd" }
          %tspan Truss Heigth
          %tspan {{ truss_height.toFixed(0) }}
          %tspan cm
          %tspan {{ truss_x.toFixed(0) }}
          %tspan {{ truss_y.toFixed(0) }}

        %draggable{ ":model": "truss_slider" }
          %circle{ "r": 10 }

:ruby2js
  class Graph < Vue
    el ".graph_app"
    def initialize
      @padd = 30
      @frame = {trusses: true , size: 15 , height: 250,
                 posts: 3}
      @size_slider = {x: 450 , y: 300}
      @truss_slider = {x: 150 , y: 150}
    end
    def truss_x
      x = self.width / self.truss_height
      return @frame.size * Math.sqrt( 1 + x * x / 4)
    end
    def truss_y
      x =  self.truss_height / self.width
      return @frame.size * Math.sqrt( 1 + 4 * x * x )
    end
    def truss_height
      return @truss_slider.y
    end
    def angle
      return @frame.height / @size_slider.x
    end
    def length
      return self.spacing * (@frame.posts - 1 )
    end
    def frame_height
      return @frame.height + (@frame.trusses ? self.truss_height : 0)
    end
    def spacing
      return @size_slider.x
    end
    def posts_positions
      arr = []
      0.upto(@frame.posts - 1){ |i| arr << Math.floor(i * (self.length - @frame.size)/(@frame.posts - 1))}
      arr << self.length - @frame.size
      arr
    end
    def width
      return @size_slider.y
    end
    def total_width
      return self.width + @padd
    end
    def total_length
      return self.length + @padd
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      return @frame.posts * @frame.size * @frame.size * @frame.height
    end
    def plate_cubes
      meters = 2 * self.length
      meters += 2 * self.width unless @frame.trusses
      return @frame.size * @frame.size * meters
    end
    def truss_cubes
      return 0 unless @frame.trusses
      return @frame.posts * @frame.size * @frame.size * (self.width * 2) #for now
    end
  end
  gra = Graph
