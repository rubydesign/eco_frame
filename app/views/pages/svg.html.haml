.graph_app
  .post_control
    %range-slider{"v-model":"frame.truss.height" , ":min":"50", ":max":"250" }
      %b Truss Height {{frame.truss.height}}
    %range-slider{"v-model":"frame.height" , ":min":"100", ":max":"350" }
      %b Post Height {{frame.height}}
    %range-slider{"v-model":"frame.width" ,":min":"100", ":max":"650"}
      %b Width {{frame.width}}
    %range-slider{"v-model":"frame.spacing" , ":min":"100", ":max":"650"}
      %b Length {{length}}
    %range-slider{"v-model":"frame.posts" ,":min":"2", ":max":"10", ":step":1}
      %b Posts {{frame.posts}}
    %range-slider{"v-model":"frame.size" ,":min":"10", ":max":"25", ":step":1}
      %b Size {{frame.size}}cm ({{(frame.size/2.5).toFixed(0)}}in)
    %range-slider{"v-model":"frame.perspective", ":min":0, ":max":100}
      %b Perspective {{frame.perspective}}
    .rangeslider
      %div
        %b Braces
        %input{type:"checkbox", "v-model":"frame.braces"}
      %span
        %b Trusses
        %input{type:"checkbox", "v-model":"frame.truss.on"}
    .rangeslider
      %div
        %b Joints
        {{joins}}
      %div
        %b Cubic meters:
        {{cubes}}
      %div
        %b Price Estimate
        {{Math.floor(joins * 4*45 + cubes * 1.2*650)}}


  .front{ ":style":"`width: 100vw; |
                     height: ${frame_height}px; |
                     margin-left: ${ww - frame.width -200}px; |
                     perspective-origin: ${2*frame.width}px 0px; |
                     perspective: ${200000/frame.perspective}px`"} |
    .child{ "v-for":"i in frame.posts" ,
            ":style":"`${transform_post(i)}`"}
      %svg{ "width":"100%" ,
            ":height":"`${frame_height}px`",
            ":mask":"`url(#mask_${frame.truss.on ? 'all':'frame'})`" ,
            ":viewbox":"'0 0 ' + frame.width + ' ' + frame_height"}
        %defs
          %mask#mask_all
            %polyline{":points":"`${frame.width/2},0 |
                      ${frame.width},${frame.truss.height} |
                      ${frame.width},${frame.truss.height+frame.height} |
                      0,${frame.truss.height+frame.height}  |
                      0,${frame.truss.height}`", |
                      ":style":"`fill: rgb(225,225,225);`"} |
          %mask#mask_frame
            %polyline{":points":"`${frame.width},0 |
                          ${frame.width},${frame.height} |
                          0,${frame.height}  0,0`", |
                      ":style":"`fill: rgb(225,225,225);`"} |
        %g{ "is":"frame-outline", ":frame":"frame"}
        %g{ "is":"truss-harja", ":frame":"frame"}
        %g{ "is":"brace-outline" , ":frame":"frame" , "v-if":"frame.braces"}

= render "vue/frame_outline"
= render "vue/brace_outline"
= render "vue/truss_harja"
= render "vue/range_slider"

:ruby2js

  class Graph < Vue
    el ".graph_app"
    def initialize
      @frame = {truss: {height: 120, type: :harja , on: true} , size: 15 , height: 250, spacing: 300,
                width: 300 , posts: 4 , braces: true , perspective: 100}
    end
    def ww
      return window.innerWidth
    end
    def transform_post(i)
      ret = "transform: translateZ(" +  @frame.spacing*(i-1)
      ret = ret + "px) rotateY(-25deg);"
      return ret
    end
    def set_posts(num)
      old_length = self.length
      @frame.spacing = Math.floor(old_length / (num - 1))
      @frame.posts = num
    end
    def length
      return @frame.spacing * (@frame.posts - 1 )
    end
    def frame_height
      return @frame.height + @frame.size + (@frame.truss.on ? @frame.truss.height : 0)
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      meters =  @frame.height
      meters += 1 if @frame.braces
      return 2 * @frame.posts * @frame.size * @frame.size * meters
    end
    def plate_cubes
      return @frame.size * @frame.size * 2 * self.length
    end
    def truss_cubes
      meters = @frame.width
      meters += @frame.width + 3*@frame.truss.height if @frame.truss.on
      return @frame.posts * @frame.size * @frame.size * meters
    end
    def joins
      return post_joins + truss_joins + plate_joins
    end
    def post_joins
      return @frame.braces ? 4 : 2
    end
    def plate_joins
      return 2 * (@frame.posts - 1)
    end
    def truss_joins
      return 0 unless @frame.truss.on
      return @frame.posts * 9
    end
  end
