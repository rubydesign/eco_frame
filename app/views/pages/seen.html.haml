%script{src: asset_path("seen.js")}
.seen_app
  %input{"min":"1", "max":"100", ":step":"1", value: 40, type:"range" ,
        "oninput":"update(value)"}

  %canvas#seen-canvas{width:"300px", height:"300px"}

:javascript
  var context, dragger, height, scene, shape, base, width ,scale;

  width = 300;
  height = 300;
  scale = 40;

  base = seen.Models.default().append();
  frames = base.append();
  frame1 = frames.append();
  frame1.add( seen.Shapes.rectangle(seen.P(0,0,0) , seen.P(0.15,2, 0.15) ));
  frame1.add( seen.Shapes.rectangle(seen.P(2,0,0) , seen.P(2.15,2 , 0.15)));
  frame1.add( seen.Shapes.rectangle(seen.P(0,2,0) , seen.P(2.15,2.15,0.15)));

  frame1 = frames.append();
  frame1.add( seen.Shapes.rectangle(seen.P(0,0,1) , seen.P(0.15,2, 1.15) ));
  frame1.add( seen.Shapes.rectangle(seen.P(2,0,1) , seen.P(2.15,2 , 1.15)));
  frame1.add( seen.Shapes.rectangle(seen.P(0,2,1) , seen.P(2.15,2.15,1.15)));

  frames.scale( scale );


  // Create scene and add shape to model
  scene = new seen.Scene({
    model: seen.Models.default().add(base),
    viewport: seen.Viewports.center(width, height)
  });

  // Create render context from canvas
  context = seen.Context('seen-canvas', scene).render();

  // Enable drag-to-rotate on the canvas
  dragger = new seen.Drag('seen-canvas', {
    inertia: true
  });

  dragger.on('drag.rotate', function(e) {
    var xform;
    xform = seen.Quaternion.xyToTransform(...e.offsetRelative);
    base.transform(xform);
    return context.render();
  });

  function update(num){
    scale = parseInt(num);
    console.log(num );
    frames.reset()
    frames.scale(scale);
    //scene.model.children[0] = base;
    context.render();
  }
