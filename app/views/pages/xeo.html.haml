= javascript_include_tag 'vue'

.graph_app
  .post_control
    %range-slider{"v-model":"frame.truss.angle" , ":min":"10", ":max":"50" }
      %b Truss Angle {{frame.truss.angle}}&deg; (Heigth: {{Math.floor(truss_height)}}cm)
    %range-slider{"v-model":"frame.height" , ":min":"100", ":max":"350" }
      %b Post Height {{frame.height}}
    %range-slider{"v-model":"frame.width" ,":min":"100", ":max":"660"}
      %b Width {{frame.width}}
    %range-slider{"v-model":"frame.spacing" , ":min":"100", ":max":"660"}
      %b Length {{length}} (Spacing: {{frame.spacing}})
    %range-slider{"v-bind:value":"frame.posts" , "v-on:input":"set_posts($event)",
                  ":min":"2", ":max":"11"}
      %b Posts {{frame.posts}}
    %range-slider{"v-model":"frame.size" ,":min":"4", ":max":"11"}
      %b Size {{frame.size}}in ({{(frame_size).toFixed(0)}}cm)
    %range-slider{"v-model":"scale", ":min":30, ":max":150}
      %span
        Scale
        %b {{scale}}
    .rangeslider
      %span
        %b Braces
        %input{type:"checkbox", "v-model":"frame.braces"}
      %br
      %span
        %b Trusses
        %input{type:"checkbox", "v-model":"frame.truss.on"}
      %br
      %span
        Joints
        %b {{joins}}
      %br
      %span
        Cubic meters
        %b {{cubes}}
      %br
      %span
        Price Estimate
        %b {{estimate}}
.canvas_wrapper{style: "height: 500px; width: 100%;"}
  %canvas#xeocanvas{style: "height: 100%; width: 100%;"}

= javascript_include_tag 'frame'


= render "vue/range_slider"

:ruby2js

  class Graph < Vue
    el ".graph_app"
    def initialize
      @frame = {truss: {angle: 30, type: :harja , on: true} ,size: 6 ,height: 250,
                spacing: 300, width: 400 , posts: 4 , braces: true }
      @scale = 100
    end
    def ww
      return window.innerWidth
    end
    def estimate
      base =  joins * (25 + 10 * self.frame_size)
      base += cubes * 1000
      return 100*Math.floor(base/100) + " - " + 100*Math.floor((base*1.09)/100)
    end
    def transform_post(i)
      ret = "transform: translateZ(" +  @frame.spacing*(i-1)
      ret = ret + "px) rotateY(-25deg);"
      return ret
    end
    def set_posts(num)
      old_length = self.length
      @frame.spacing = Math.floor(old_length / (num - 1))
      @frame.posts = num
    end
    def length
      return @frame.spacing * (@frame.posts - 1 )
    end
    def frame_size
      return @frame.size*2.5
    end
    def frame_height
      return @frame.height + self.frame_size + (@frame.truss.on ? self.truss_height : 0)
    end
    def truss_height
      return @frame.width * Math.tan(@frame.truss.angle * (Math.PI/180)) / 2
    end
    def cubes
      sum = post_cubes + truss_cubes + plate_cubes
      return (sum / (100*100*100)).toFixed(2)
    end
    def post_cubes
      meters =  @frame.height
      meters += 1.5 if @frame.braces
      return 2 * @frame.posts * self.frame_size * self.frame_size * meters
    end
    def meter_price(meters)
      meters *= 1.1 if meters > 500
      meters *= 1.1 if meters > 600
      return meters
    end
    def plate_cubes
      return self.frame_size * self.frame_size * 2 * meter_price(self.length)
    end
    def truss_cubes
      meters = meter_price(@frame.width)
      meters += @frame.width + 3*self.truss_height if @frame.truss.on
      return @frame.posts * self.frame_size * self.frame_size * meters
    end
    def joins
      return post_joins + truss_joins + plate_joins
    end
    def post_joins
      return @frame.posts * (@frame.braces ? 4 : 2)
    end
    def plate_joins
      return 2 * (@frame.posts - 1)
    end
    def truss_joins
      return @frame.truss.on ?  @frame.posts * 9 : 0
    end
  end
