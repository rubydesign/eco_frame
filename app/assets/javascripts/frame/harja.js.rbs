  class Harja < EcoModel

  def initialize( data  )
    super(data)
  end
  def update()
    self.update_list(  self.posts , "king" )
    self.update_pairs( self.posts , "rafter" )
    self.update_pairs( self.posts , "brace" )
  end
  def update_king(king,i)
    truss_height = (self.tan * self.width - self.size)/2
    king.position( 0 , truss_height, self.offset(i) )
    king.scale( self.size, truss_height,  self.size )
  end
  def update_rafter(rafter , i , side)
    rafter.b_scale(side , self.size, self.rafter_length / 2,  self.size)
    rafter.rotZ(side*(90-self.angle))
    rafter.trans( side * self.width, 0 , self.offset(i))
  end
  def update_brace( brace , i , side )
    brace.rotateZ(side*45 )
    brace.scale( self.size, self.brace_length, self.size)
    brace.position( -side*(self.brace_length*self.brace_cosm + self.brace_sin*self.size/2)  ,
                  (self.brace_length*self.brace_sinm ) + 3*self.size/2,
                   self.offset(i) )
  end
  def brace_rad
    return 45* Math.PI / 180
  end
  def brace_sin
    return Math.sin(self.brace_rad)
  end
  def brace_sinm
    return Math.sin(Math.PI/2 - self.brace_rad)
  end
  def brace_cosm
    return Math.cos(Math.PI/2 - self.brace_rad)
  end
  def brace_length
    return  self.sin * self.width / 2 - self.size
  end
  def rafter_length
    return  self.width/self.cos
  end
end

class NoTruss < xeogl.Model
  def initialize( frame  )
    super()
  end
  def update()
  end
  def remove()
  end
end
