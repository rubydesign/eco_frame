class Collar < EcoModel

  def initialize( data )
    super(data, "collar")
  end

  def parts()
    that = self
    return super().concat [
      {id: "beam" , func: lambda{that.update_pairs( that.posts , "beam")}},
      {id: "rafter" , func: lambda{that.update_pairs(that.posts ,"rafter")}},
      {id: "colar" , func: lambda{that.update_pairs(that.posts ,"collar")}},
      {id: "king_brace" , func: lambda{that.update_pairs(that.posts ,"king_brace")}}]
  end
  def update_beam(beam,i , side)
    truss_h = self.truss_height - self.size
    beam.b_scale( 0 , self.size, truss_h/2,  self.size )
    beam.rotZ(side*90)
    beam.trans( 0 , truss_h/2 , self.offset(i) )
  end
  def update_rafter(rafter , i , side)
    rafter.b_scale(side , self.size, self.rafter_length / 2,  self.size)
    rafter.rotZ(side*(90+self.angle))
    rafter.trans( 0, self.truss_height , self.offset(i))
  end
  def update_collar(rafter , i , side)
    rafter.b_scale(side , self.size, self.rafter_length / 2,  self.size)
    rafter.rotZ(side*(90+self.angle))
    rafter.trans( 0, self.truss_height - 50 , self.offset(i))
  end
  def update_king_brace( brace , i , side )
    brace.b_scale(side, self.size, self.brace_length, self.size)
    brace.rotZ( - side*45 )
    brace.trans( side*self.size, self.size/2, self.offset(i) )
  end
  def brace_length
    return  self.sin * self.width / 2 - self.size
  end
end
