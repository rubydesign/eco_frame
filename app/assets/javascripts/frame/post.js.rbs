class Post < EcoModel
  def initialize( data )
    super(data, "posts")
  end
  def joins
    return self.posts*2
  end

  def parts()
    that = self
    return [
      {id: "foot" , func: lambda{that.update_pairs( that.posts , "foot" , "grey")}},
      {id: "post" , func: lambda{that.update_pairs(that.posts ,"post")}},
      {id: "plate" , func: lambda{that.update_pairs(that.posts - 1, "plate")}} ]
  end
  def update_foot(foot, i , side)
    foot.b_scale( side , 2*self.size, 2*self.size, 2*self.size)
    foot.trans(side*(self.width + self.size),
                  -2*self.height - 4*self.size ,  self.offset(i) + self.size)
  end
  def update_post(post , i, side)
    post.b_scale( -side , self.size, self.height , self.size)
    post.rotZ(180)
    post.trans(side * self.width , 0 , self.offset(i))
  end
  def update_plate(plate , index , side)
    plate.b_scale(side, self.size, self.size , self.spacing )
    plate.trans(side * self.width  , -2*self.size ,
                self.offset(index ) )
  end
  def braces
    return @braced
  end
  def set_brace(on)
    @braced = on
  end
end
