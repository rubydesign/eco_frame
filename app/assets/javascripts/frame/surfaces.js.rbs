class Surfaces < EcoModel

  def initialize(data)
    super(data, "surfaces")
  end

  def update()
    self.update_pairs( 1 , "inner_wall" , "grey")
    self.update_pairs( 1 , "outer_wall" , "grey")
    self.update_pairs( 1 , "inner_ceil" , "grey")
    self.update_pairs( 1 , "outer_ceil" , "grey")
    self.update_list( self.board_num , "floor" )
  end
  def update_inner_wall(inner, i , side)
    inner.b_scale( side , 0.6, self.height, self.wall_length + self.one_inch)
    inner.trans(side*(self.width + 1.25), -2*self.height , self.length)
  end
  def update_outer_wall(outer, i , side)
    outer.b_scale( side , 0.6, self.outer_wall_height,
                  self.wall_length + self.one_inch)
    outer.trans(side*(self.width + 2*self.wall_ins - 0.6),
                    -2*self.height , self.length )
  end
  def update_inner_ceil(ceil, i , side)
    ceil.b_scale( -side , 0.6 , self.width / (2*self.cos) + 0.6,
                            self.wall_length + self.one_inch)
    ceil.rotZ(side* (90 - self.angle)  )
    ceil.trans(side*(self.width + 0.5) , 0 , self.length )
  end
  def update_outer_ceil(ceil, i , side)
    ceil.b_scale( side , 0.6 , self.outer_length ,
                      self.wall_length + self.one_inch)
    ceil.rotZ(side* (90 + self.angle)  )
    ceil.trans(0, self.harja_at(self.floor_ins) , self.length )
  end
  def update_floor(wall, i)
    wall.b_scale(1 , self.width,
                     self.one_inch/2,
                     self.three_inch - 0.2)
    wall.trans(self.width ,
                4*self.size + 2*self.three_inch - 2*self.height,
                - self.board_offset(i))
  end
  def board_num
    Math.ceil(self.length / self.three_inch ) + 1
  end
  def board_spacing
    2*self.length / (board_num - 1 )
  end
  def board_offset(i)
    return self.length - self.board_spacing * i
  end

end
