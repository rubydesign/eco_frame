class Slope < EcoModel

  def initialize(data)
    super(data,"slope")
  end

  def ceiling_length
    return self.length + self.size - self.two_inch
  end
  def ceiling_num
    Math.ceil(self.ceiling_length / 60) + 1
  end
  def ceiling_spacing
    self.ceiling_length / (ceiling_num - 1)
  end
  def ceiling_offset(i)
    return self.ceiling_spacing * ((self.ceiling_num - 1)/2 - i)
  end
  def update()
    self.update_pairs(self.ceiling_num, "inner")
    self.update_pairs(self.ceiling_num, "outer")
    self.update_pairs(self.ceiling_num, "tie1")
#    self.update_pairs(self.ceiling_num, "tie2")
#    self.update_pairs(self.ceiling_num, "tie3")
  end

  def update_tie1(tie , i , side )
    tie.rotateZ(side* self.angle  )
    tie.position( -side * self.width/2 ,
                  self.tan * self.width/4 + self.sin*self.wall_ins,
                  self.ceiling_offset(i) )
    tie.scale( self.one_inch, self.floor_ins , self.one_inch)
  end
  def update_tie2(tie , i , side )
    tie.position(side * (self.width + self.size + self.wall_ins + self.one_inch) ,
                  (1 - 2) * 80 - self.one_inch,
                  self.ceiling_offset(i) )
    tie.scale( self.wall_ins, self.one_inch , self.one_inch)
  end
  def update_tie3(tie , i , side )
    tie.position(side * (self.width + self.size + self.wall_ins + self.one_inch) ,
                  (1 - 3) * 80 - self.one_inch,
                  self.ceiling_offset(i) )
    tie.scale( self.wall_ins, self.one_inch , self.one_inch)
  end

  def update_inner(ceil , i , side)
    ceil.rotateZ(side* (90 - self.angle)  )
    ceil.position( side * (self.width + self.size + self.cos*self.two_inch) / 2  ,
                        self.tan*(self.width + self.size + self.two_inch)/2 - self.cos*self.two_inch  ,
                        self.ceiling_offset(i) )
    ceil.scale( self.one_inch , self.inner_length/2 , self.one_inch)
  end
  def update_outer(ceil , i , side)
    ceil.rotateZ(side* (90 - self.angle)  )
    ceil.position( side * (self.width + self.size + self.wall_ins + self.cos*self.one_inch) / 2  ,
                        self.tan*(self.width + self.size + self.wall_ins )/2 - self.cos*self.two_inch,
                        self.ceiling_offset(i) )
    ceil.scale( self.one_inch , self.outer_length/2 , self.one_inch)
  end
  def inner_length
    return  (self.width + 2*self.size)/( 2 * self.cos)
  end
  def outer_length
    return  (self.width + self.size + 2*self.wall_ins )/( 2 * self.cos)
  end

end
