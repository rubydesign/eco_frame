class Slope < EcoModel

  def initialize(data)
    super(data,"slope")
  end

  def update()
    self.update_pairs(self.wall_num, "inner")
    self.update_pairs(self.wall_num, "outer")
    self.update_pairs(self.wall_num, "tie1")
#    self.update_pairs(self.wall_num, "tie2")
#    self.update_pairs(self.wall_num, "tie3")
  end

  def update_tie1(tie , i , side )
    tie.rotateZ(side* self.angle  )
    tie.position( -side * (self.width + self.floor_ins*self.sin+ self.cos*self.one_inch) ,
                  self.cos*self.floor_ins - self.one_inch*self.sin,
                  self.wall_offset(i) )
    tie.scale( self.one_inch, self.floor_ins , self.one_inch)
  end
  def update_tie2(tie , i , side )
    tie.position(side * (self.width + self.size + self.wall_ins + self.one_inch) ,
                  (1 - 2) * 80 - self.one_inch,
                  self.wall_offset(i) )
    tie.scale( self.wall_ins, self.one_inch , self.one_inch)
  end
  def update_tie3(tie , i , side )
    tie.position(side * (self.width + self.size + self.wall_ins + self.one_inch) ,
                  (1 - 3) * 80 - self.one_inch,
                  self.wall_offset(i) )
    tie.scale( self.wall_ins, self.one_inch , self.one_inch)
  end

  def update_inner(ceil , i , side)
    ceil.rotateZ(side* (90 - self.angle)  )
    ceil.position( side * (self.inner_width/2 - self.sin*self.one_inch) ,
                        self.tan*self.inner_width/2 - self.cos*self.one_inch  ,
                        self.wall_offset(i) )
    ceil.scale( self.one_inch , self.inner_length/2 , self.one_inch)
  end
  def update_outer(ceil , i , side)
    ceil.rotateZ(side* (90 - self.angle)  )
    ceil.position( side * (self.outer_width/2 - self.sin*self.one_inch)  ,
                        self.tan*self.outer_width/2 - self.cos*self.one_inch,
                        self.wall_offset(i) )
    ceil.scale( self.one_inch , self.outer_length/2 , self.one_inch)
  end
  def inner_width
    return (self.width + self.two_inch/self.sin)
  end
  def inner_height
    return self.width * self.tan
  end
  def inner_length
    return  self.inner_width / self.cos
  end

  def outer_width
    return (self.width + 2*self.wall_ins)
  end
  def outer_height
    return self.outer_width * self.tan
  end
  def outer_length
    return  (self.outer_width )/self.cos
  end

end
