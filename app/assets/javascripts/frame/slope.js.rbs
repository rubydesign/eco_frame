class Slope < EcoModel

  def initialize(data)
    super(data,"slope")
  end

  def update()
    self.update_pairs(self.wall_num, "inner")
    self.update_pairs(self.wall_num, "outer")
    self.update_pairs(self.wall_num, "tie1")
    self.update_pairs(self.wall_num, "tie2")
    self.update_pairs(self.wall_num, "tie3")
  end

  def update_tie1(tie , i , side )
    tie.b_scale( side, self.one_inch, self.floor_ins*self.cos , self.one_inch)
    tie.trans( 0, self.tan*self.width, self.wall_offset(i) )
  end
  def update_tie2(tie , i , side )
    tie.b_scale( side, self.one_inch, self.floor_ins , self.one_inch)
    tie.rotZ(side*self.angle)
    tie.trans( -2*side*self.width/3, (1-2/3)*self.tan*self.width, self.wall_offset(i) )
  end
  def update_tie3(tie , i , side )
    tie.b_scale( side, self.one_inch, self.floor_ins , self.one_inch)
    tie.rotZ(side*self.angle)
    tie.trans( -1*side*self.width/3,(1-1/3)*self.tan*self.width, self.wall_offset(i) )
  end
  def update_inner(ceil , i , side)
    ceil.b_scale( -side , self.one_inch , self.width / (2*self.cos) , self.one_inch)
    ceil.rotZ(side* (90 - self.angle)  )
    ceil.trans(side*self.width , 0 , self.wall_offset(i) )
  end
  def update_outer(ceil , i , side)
    ceil.b_scale(side, self.one_inch , self.outer_length , self.one_inch)
    ceil.rotZ(side* (90 - self.angle)  )
    ceil.trans( side * self.outer_width ,
                   2 * self.cos*self.floor_ins,
                       self.wall_offset(i) )
  end
end
