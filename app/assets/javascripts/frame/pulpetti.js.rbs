
class Pulpetti < NoTruss

  def initialize( data )
    super(data, "pulp")
  end

  def joins()
    return self.posts*4 + super()
  end
  def pieces()
    return self.posts * 2 + super()
  end
  def lengths()
    return self.posts*(self.truss_height/2 + self.rafter_length + 50) + super()
  end

  def parts()
    that = self
    return super().concat [
      {id: "king_pulp" , func: lambda{that.update_list(that.posts ,"king_pulp")}},
      {id: "rafter_pulp" , func: lambda{that.update_list(that.posts ,"rafter_pulp")}},
      {id: "rafter_overhang" , func: lambda{that.update_list(that.posts ,"rafter_overhang")}}]
  end

  def update_king_pulp(king,i)
    king.b_scale( -1, self.size, self.truss_height,  self.size )
    king.trans( -self.width, 0, self.offset(i))
  end
  def update_rafter_pulp(rafter , i)
    rafter.b_scale(1, self.size, self.rafter_length + 50,  self.size)
    rafter.rotZ(-90-self.angle)
    rafter.trans( -self.width ,
                  2*self.tan*self.width,
                  self.offset(i))

  end
  def update_rafter_overhang(rafter , i)
    rafter.b_scale(-1, self.size, 50,  self.size)
    rafter.rotZ(90-self.angle)
    rafter.trans( -self.width  ,
                  2*self.tan*self.width ,
                  self.offset(i))

  end
  def truss_height
    self.tan * self.width
  end
  def brace_rad
    return 45* Math.PI / 180
  end
  def brace_sin
    return Math.sin(self.brace_rad)
  end
  def brace_sinm
    return Math.sin(Math.PI/2 - self.brace_rad)
  end
  def brace_cosm
    return Math.cos(Math.PI/2 - self.brace_rad)
  end
  def brace_length
    return  self.sin * self.width / 2 - self.size
  end
  def rafter_length
    return self.width/ self.cos
  end

end
