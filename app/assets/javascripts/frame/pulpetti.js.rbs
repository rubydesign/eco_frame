class Pulpetti < EcoModel

  def initialize( data )
    super(data, "pulp")
  end
  def parts
    that = self
    return [
      {id: "king_pulp" , func: lambda{that.update_list(that.posts ,"king_pulp")}},
      {id: "rafter_pulp" , func: lambda{that.update_pairs(that.posts ,"rafter_pulp")}}]
  end

  def update_king_pulp(king,i)
    puts "called king3"
    truss_height = self.tan * self.width
    puts truss_height
    king.b_scale( self.size,truss_height,  self.size )
    puts "called king1"
    king.trans( 0, 0, self.offset(i))
    puts "called king"
  end
  def update_rafter_pulp(rafter , i , side)
    rafter.b_scale( self.size, self.rafter_length + 70 ,  self.size )
    rafter.rotZ( (90 - self.angle)  )
    rafter.trans( self.cos*self.size,
                   self.width  ,
                   self.offset(i) )
     puts "called rafter"
  end
  def brace_rad
    return 45* Math.PI / 180
  end
  def brace_sin
    return Math.sin(self.brace_rad)
  end
  def brace_sinm
    return Math.sin(Math.PI/2 - self.brace_rad)
  end
  def brace_cosm
    return Math.cos(Math.PI/2 - self.brace_rad)
  end
  def brace_length
    return  self.sin * self.width / 2 - self.size
  end
  def rafter_length
    return self.width/ self.cos
  end

end
