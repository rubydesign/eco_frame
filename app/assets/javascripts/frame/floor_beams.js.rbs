class FloorBeams < EcoModel

  def initialize(data)
    super(data,"floor_beams")
    self.cube( "tuuli" , "grey")
    self.update()
  end
  def joist_num
    Math.ceil(self.width / 60) + 1
  end
  def joist_spacing
    (self.width + 2*self.overhang + self.size - self.two_inch) / (joist_num - 1)
  end
  def beam_num
    Math.ceil((self.length - 2*self.size) / self.beam_span) + 1
  end
  def beam_spacing
    (self.length - 2*self.size) / (beam_num - 1)
  end
  def beam_offset(at)
    return beam_spacing * ((beam_num - 1)/2 - at)
  end
  def beam_span
    return 280
  end
  def joist_height
    return 15
  end
  def beam_width
    return self.width_2 + self.size_2 + self.overhang
  end
  def update()
    self.update_list(self.joist_num , "joist")
    self.update_list(self.beam_num , "beam")
    self.update_pairs(1, "plate")
    self.at("tuuli").scale(self.beam_width , self.one_inch/2 , self.joist_length )
    self.at("tuuli").position(0, -self.height  , 0)
  end
  def update_joist(joist , i )
    joist.position(i*self.joist_spacing - (self.width+self.size-self.two_inch)/2 - self.overhang,
                    -self.height + 3*self.size_2 + self.joist_height, 0 )
    joist.scale( 2.5, self.joist_height_2,  self.joist_length )
  end
  def update_beam(beam , i)
    beam.position(0 ,  -self.height + 3*self.size_2, beam_offset(i) )
    beam.scale(self.beam_width, self.size_2, self.size_2 )
  end
  def update_plate(plate , i ,  side)
    plate.position(side * self.width_2 ,  - self.height + self.size_2,
                    self.offset(self.posts/2 - 0.5) )
    plate.scale( self.size_2, self.size_2,  self.length/2 )
  end
end
