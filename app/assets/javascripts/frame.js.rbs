class Frame < xeogl.Model
  def initialize()
    super({id: "frame"})
    @materials = {
      wood:  xeogl.LambertMaterial.new({ color: [230/255, 145/255, 60/255]}),
      floor:  xeogl.LambertMaterial.new({ color: [20/255, 15/255, 60/255]}),
      grey: xeogl.LambertMaterial.new({ color: [125/255, 125/255, 125/255]})
    }
    @frame = VueController._data.frame
    @post_num = VueController._data.posts
    @posts = []
    @trusses = []
    @truss = :harja

    0.upto(@post_num - 1) do | i|
      self.new_post(true)
      self.new_truss()
    end
    self.add(Floor.new( self ))
    @plate = Plate.new( self )
    self.update(@frame)
  end
  def new_post(braced = true)
    post = PostBeam.new(self , braced)
    self.add( post )
    post.transform = xeogl.Translate.new([0,0,0])
    @posts << post
    return post
  end
  def new_truss()
    truss = Harja.new(self ) if @truss == :harja
    if @truss == :pulp
      truss = Pulpetti.new(self )
    end
    truss = NoTruss.new(self) if truss == nil
    truss.transform = xeogl.Translate.new([0,0,0])
    self.add( truss )
    @trusses << truss
    return truss
  end
  def set_brace(on)
    @posts.each{|p| p.set_brace(on)}
  end
  def set_posts(num,space)
    return if num == @post_num
      prev = @post_num
    @post_num = num
    if(num < prev)
      @posts[num].iterate {|elem| elem.visible = false}
      @posts.pop()
      @trusses[num].iterate {|elem| elem.visible = false}
      @trusses.pop()
    else
      self.new_post( @posts[0].braces)
      self.new_truss( )
    end
  end
  def set_truss(arg)
    if(arg == :pulp && @frame.angle > 15)
      @frame.angle = 10
    end
    if(arg == :harja && @frame.angle < 15)
      @frame.angle = 30
    end
    @truss = arg
    0.upto(self.posts - 1) do | i|
      @trusses[i].iterate {|elem| elem.visible = false}
    end
    @trusses = []
    0.upto(self.posts - 1) do | i|
      self.new_truss()
    end
    self.update(@frame)
  end
  def rad
    return @frame.angle * (Math.PI / 180)
  end
  def tan
    return Math.tan(self.rad)
  end
  def sin
    return Math.sin(self.rad)
  end
  def cos
    return Math.cos(self.rad)
  end
  def spacing
    return @frame.spacing
  end
  def size
    return @frame.size
  end
  def height
    return @frame.height
  end
  def width
    return @frame.width
  end
  def length
    return @frame.spacing*(self.posts - 1)
  end
  def angle
    return @frame.angle
  end
  def posts
    return @post_num
  end
  def transforms
    translate = xeogl.Translate.new( id: "pos" + Math.random())
    rotate = xeogl.Rotate.new({xyz: [0,0,1] , parent: translate, id: "rot" + Math.random()})
    return xeogl.Scale.new( {parent: rotate, id: "scale" + Math.random()})
  end
  def cube_for( model , color , id )
    color ="wood" unless color
    args = {  transform: self.transforms ,
            material:  @materials[color]}
    args.id = id if id != nil
    cube = model.add(xeogl.Entity.new( args ))
    return cube
  end
  def plane_for( model , color = "floor")
    plane =xeogl.Entity.new({ geometry: xeogl.PlaneGeometry.new(),
                                  transform: self.transforms ,
                                  material:  @materials[color] })
    return plane
  end

  def offset(at)
    return @frame.spacing * ((@post_num - 1)/2 - at)
  end
  def update( frame )
    @frame = frame
    @plate.update()
    self.components["floor"].update()
    @posts.each_with_index do |p , i|
      p.transform.xyz = [0,0,self.offset(i)]
      p.update()
    end
    @trusses.each_with_index do |t,i|
      t.transform.xyz = [0,0,self.offset(i)]
      t.update()
    end
  end
end
