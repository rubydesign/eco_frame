class Frame
  def initialize(clay_app , frame , posts)
    @frame = frame
    @clay_app = clay_app
    @posts = Array.new(posts)
    @trusses = Array.new()
    @truss = :harja
    0.upto(posts - 1) do | i|
      @posts[i]  = PostBeam.new(self , i , true)
      @trusses[i] = self.new_truss(i)
    end
    @floor = Floor.new( self )
    @plate = Plate.new( self )
  end
  def set_brace(on)
    @posts.each{|p| p.set_brace(on)}
  end
  def set_posts(num , spacing)
    @frame.spacing = spacing #precalculated in app
    return if num == self.posts
    if(num < self.posts)
      @posts[num].remove()
      @posts.pop()
      @trusses[num].remove()
      @trusses.pop()
    else
      @posts << PostBeam.new(self , num - 1 , @posts[0].braces)
      @trusses << self.new_truss( num - 1 )
    end
  end
  def set_truss(arg)
    @truss = arg
    0.upto(self.posts - 1) do | i|
      @trusses[i].remove()
      @trusses[i] = self.new_truss(i)
    end
    self.update(@frame)
  end
  def new_truss(at)
    return Harja.new(self , at) if @truss == :harja
    return NoTruss.new(self,at)
  end
  def rad
    return self.angle * (Math.PI / 180)
  end
  def tan
    return Math.tan(self.rad)
  end
  def sin
    return Math.sin(self.rad)
  end
  def cos
    return Math.cos(self.rad)
  end
  def offset(at)
    return @frame.spacing * ((@posts.length - 1)/2 - at)
  end
  def spacing
    return @frame.spacing
  end
  def size
    return @frame.size
  end
  def height
    return @frame.height
  end
  def width
    return @frame.width
  end
  def length
    return @frame.spacing*(self.posts - 1)
  end
  def angle
    return @frame.truss.angle
  end
  def posts
    return @posts.length
  end
  def clay_app
    return @clay_app
  end
  def cube( color = "salmon")
    cube = @clay_app.createCube()
    cube.material.set("color" , color)
    return cube
  end
  def update( frame )
    @frame = frame
    @plate.update()
    @floor.update()
    @posts.each{|p| p.update()}
    @trusses.each{|t| t.update()}
  end
end
