class Frame < EcoModel
  def initialize()
    super(VueController._data ,  "frame")
    @posts = []
    @trusses = []
    @truss = :harja

    0.upto(self.posts - 1) do | i|
      self.new_post(true)
      self.new_truss()
    end
    self.add(Floor.new(@data ))
    self.add(FloorBeams.new(@data ))
    self.add(Plate.new(@data ))
    self.update()
  end
  def new_post(braced = true)
    post = PostBeam.new(@data , braced)
    self.add( post )
    post.transform = xeogl.Translate.new([0,0,0])
    @posts << post
    return post
  end
  def new_truss()
    truss = Harja.new(@data ) if @truss == :harja
    if @truss == :pulp
      truss = Pulpetti.new(@data )
    end
    truss = NoTruss.new(@data) if truss == nil
    truss.transform = xeogl.Translate.new([0,0,0])
    self.add( truss )
    @trusses << truss
    return truss
  end
  def set_brace(on)
    @posts.each{|p| p.set_brace(on)}
  end
  def set_posts(num,space)
    return if num == self.posts
    prev = @posts.length
    if(num < prev)
      @posts[num].iterate {|elem| elem.visible = false}
      @posts.pop()
      @trusses[num].iterate {|elem| elem.visible = false}
      @trusses.pop()
    else
      self.new_post( @posts[0].braces)
      self.new_truss( )
    end
  end
  def set_truss(arg)
    if(arg == :pulp && @data.frame.angle > 15)
      @data.frame.angle = 10
    end
    if(arg == :harja && @data.frame.angle < 15)
      @data.frame.angle = 30
    end
    @truss = arg
    0.upto(self.posts - 1) do | i|
      @trusses[i].iterate {|elem| elem.visible = false}
    end
    @trusses = []
    0.upto(self.posts - 1) do | i|
      self.new_truss()
    end
    self.update(@frame)
  end
  def update( )
    self.components["plate"].update()
    self.components["floor"].update()
    self.components["floor_beams"].update()
    @posts.each_with_index do |p , i|
      p.transform.xyz = [0,0,self.offset(i)]
      p.update()
    end
    @trusses.each_with_index do |t,i|
      t.transform.xyz = [0,0,self.offset(i)]
      t.update()
    end
  end
end
