class Frame < xeogl.Model
  def initialize()
    super({})
    @materials = {
      wood:  xeogl.LambertMaterial.new({ color: [230/255, 145/255, 60/255]}),
      floor: xeogl.LambertMaterial.new({ color: [125/255, 125/255, 125/255]})
    }
    @frame = VueController._data.frame
    @post_num = VueController._data.posts
    @posts = []
    @trusses = []
    @truss = :harja

    0.upto(@post_num - 1) do | i|
      self.new_post(i, true)
      self.new_truss(i)
    end
    @floor = Floor.new( self )
    @plate = Plate.new( self )
  end
  def new_post(i , braced = true)
    post = PostBeam.new(self , i , braced)
    self.add( post )
    @posts << post
    return post
  end
  def new_truss(i)
    truss = Harja.new(self , i) if @truss == :harja
    truss = NoTruss.new(self,i) if truss == nil
    self.add( truss )
    @trusses << truss
    return truss
  end
  def set_brace(on)
    @posts.each{|p| p.set_brace(on)}
  end
  def set_posts(num)
    return if num == @post_num
    prev = @post_num
    @post_num = num
    if(num < prev)
      self._remove(@posts[num])#.remove()
      @posts.pop()
      self._remove(@trusses[num])
      @trusses.pop()
    else
      self.new_post(num - 1 , @posts[0].braces)
      self.new_truss(num - 1 )
    end
  end
  def set_truss(arg)
    @truss = arg
    0.upto(self.posts - 1) do | i|
      truss = @trusses[i]
      self._remove(truss)
      @trusses[i] = self.new_truss(i)
    end
    self.update(@frame)
  end
  def rad
    return @frame.angle * (Math.PI / 180)
  end
  def tan
    return Math.tan(self.rad)
  end
  def sin
    return Math.sin(self.rad)
  end
  def cos
    return Math.cos(self.rad)
  end
  def offset(at)
    return @frame.spacing * ((@post_num - 1)/2 - at)
  end
  def spacing
    return @frame.spacing
  end
  def size
    return @frame.size
  end
  def height
    return @frame.height
  end
  def width
    return @frame.width
  end
  def length
    return @frame.spacing*(self.posts - 1)
  end
  def angle
    return @frame.angle
  end
  def posts
    return @post_num
  end
  def transforms
    translate = xeogl.Translate.new( id: "pos" + Math.random())
    rotate = xeogl.Rotate.new({xyz: [0,0,1] , parent: translate, id: "rot" + Math.random()})
    return xeogl.Scale.new( {parent: rotate, id: "scale" + Math.random()})
  end
  def cube_for( model , color = "wood")
    cube = model.add(xeogl.Entity.new( {  transform: self.transforms ,
                                          material:  @materials[color]}))
    return cube
  end
  def plane_for( model , color = "floor")
    plane =xeogl.Entity.new({ geometry: xeogl.PlaneGeometry.new(),
                                  transform: self.transforms ,
                                  material:  @materials[color] })
    return plane
  end

  def update( frame )
    @frame = frame
    @plate.update()
    @floor.update()
    @posts.each{|p| p.update()}
    @trusses.each{|t| t.update()}
  end
end
