class VueController < Vue
  el ".graph_app"
  options watch:  { frame: {handler: lambda{|arg| self.rerender() } ,deep: true },
                    scale: {handler: lambda{|arg| self.set_scale(arg)}} ,
                    truss: {handler: lambda{|arg| self.set_truss(arg)}}}
  def initialize
    @frame = {angle: 30 ,size: 7.5 ,height: 140,
              spacing: 180, width: 200  , braced: true}
    @scale = 100
    @wall_ins = 20
    @floor_ins = 25
    @posts = 3
    @level = 32
    @truss = :collar
    @animated = 0
    @value = 50
  end
  def get_level(_)
    if(defined? eco_frame)
      return eco_frame.subparts[@level].id
    else
      return "floor"
    end
  end

  def set_value(level)
    materials.black.metallic = level / 100
    self.rerender()
  end
  def set_level(level)
    @level = level
    self.rerender()
  end
  def anim_level
    return "off" if @animated == 0
    return "Speed: " + (11 - @animated)
  end
  def set_anim(arg)
    was = @animated
    @animated = arg
    if( was == 0 )
      eco_frame.invisible()
      eco_frame.update()
    else
      if( @animated == 0 )
        eco_frame.invisible()
        eco_frame.update()
      end
    end
  end
  def set_scale(num)
    diff = @scale - num
    @scale = num
    xeogl.scene.camera.zoom(20*diff)
  end
  def set_truss(arg)
    eco_frame.set_truss(arg)
    eco_frame.update()
  end
  def set_posts(num)
    return if @posts == num
    space = Math.floor(self.length / (num - 1))
    space = 150 if space < 150
    space = 650 if space > 650
    @posts = num
    @animated = 0
    #avoid double rerender
    if @frame.spacing == space
      eco_frame.update()
    else
      @frame.spacing = space
    end
  end
  def length
    return @frame.spacing * (@posts - 1 )
  end
  def rerender(_)
    @animated = 0
    eco_frame.invisible()
    eco_frame.update()
  end
  def estimate
    return 0
    base =  joins * (25 + 10 * @frame.size)
    base += cubes * 1000
    return 100*Math.floor(base/100) + " - " + 100*Math.floor((base*1.09)/100)
  end
  def cubes
    return 0
    sum = post_cubes + truss_cubes + plate_cubes
    return (sum / (100*100*100)).toFixed(2)
  end
  def truss_height
    return @frame.width * Math.tan(@frame.angle * (Math.PI/180)) / 2
  end
  def joins(_)
    if(defined? eco_frame)
      return eco_frame.joins()
    else
      return 0
    end
  end
  def joins(_)
    if(defined? eco_frame)
      return eco_frame.joins()
    else
      return 0
    end
  end
  def pieces(_)
    if(defined? eco_frame)
      return eco_frame.pieces()
    else
      return 0
    end
  end
  def cubes(_)
    if(defined? eco_frame)
      base =  1.1 * 4 * @frame.size * @frame.size / 1000000 
      return base * eco_frame.lengths()
    else
      return 0
    end
  end

end
