class EcoModel < xeogl.Model
  def initialize(data , id)
    super({id: id})
    @data = data
    @materials = {
      wood:  xeogl.LambertMaterial.new({ color: [230/300, 145/300, 60/300]}),
      floor: xeogl.LambertMaterial.new({ color: [0/255, 6/255, 0/255]}),
      grey:  xeogl.LambertMaterial.new({ color: [50/255, 50/255, 50/255]})
    }
  end
  def material(kind)
    return @materials[kind]
  end
  def for(id , side , color)
    id += "_" + side if side
    obj = self.at(id) || self.cube(id , color)
    obj.visible = true #re-enable removed ones
    return obj
  end
  def two_inch
    return 5
  end
  def at(id)
    return self.components[id + self.id]
  end
  def check_remove(id)
    ["" , "_1" , "_-1"].each do |suf|
      obj = self.at(id + suf)
      obj.visible = false if obj
    end
  end
  def update_pairs(max , prefix , color)
    update_function = self.__proto__["update_"+prefix]
    0.upto(max - 1 ) do |i|
      obj = self.for(prefix + i , 1 , color)
      update_function.apply(self, [obj,i,1])
      obj = self.for(prefix + i , -1 , color)
      update_function.apply(self, [obj,i,-1])
    end
    self.check_remove(prefix + max)
  end
  def update_list(max , prefix, color)
    update_function = self.__proto__["update_"+prefix]
    0.upto(max - 1 ) do |i|
      obj = self.for(prefix + i , nil , color)
      update_function.apply(self, [obj,i])
    end
    self.check_remove(prefix + max)
  end
  def transforms
    translate = xeogl.Translate.new( id: "pos" + Math.random())
    rotate = xeogl.Rotate.new({xyz: [0,0,1] , parent: translate, id: "rot" + Math.random()})
    return xeogl.Scale.new( {parent: rotate, id: "scale" + Math.random()})
  end
  def cubes(ids , color)
    ids.each {|id| self.cube(id, color)}
  end
  def cube( id , color  )
    color ="wood" unless color
    args = {  transform: self.transforms ,
              material:  self.material(color),
              id: id + self.id  }
    return self.add(xeogl.Entity.new( args ))
  end
  def offset(at)
    return self.spacing * ((self.posts - 1)/2 - at)
  end
  def rad
    return self.angle * (Math.PI / 180)
  end
  def tan
    return Math.tan(self.rad)
  end
  def sin
    return Math.sin(self.rad)
  end
  def cos
    return Math.cos(self.rad)
  end
  def spacing
    return @data.frame.spacing
  end
  def size
    return @data.frame.size
  end
  def height
    return @data.frame.height
  end
  def width
    return @data.frame.width
  end
  def length
    return @data.frame.spacing*(self.posts - 1)
  end
  def angle
    return @data.frame.angle
  end
  def posts
    return @data.posts
  end

end
