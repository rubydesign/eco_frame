  class Harja < xeogl.Model

  def initialize( frame , index )
    super({})
    @index = index
    @frame =  frame
    @king = frame.cube_for(self)
    @rafter1 = frame.cube_for(self)
    @rafter2 = frame.cube_for(self)
    @brace1 = frame.cube_for(self)
    @brace2 = frame.cube_for(self)
    self.update()
  end

  def update()
    truss_height = @frame.tan * @frame.width / 2
    @king.position( 0 , truss_height/2, @frame.offset(@index) )
    @king.scale( @frame.size / 2,truss_height / 2,  @frame.size/2 )
    self.update_rafter_at( @rafter1 , 1 )
    self.update_rafter_at( @rafter2 , -1 )
    self.update_brace_at(@brace1 , 1)
    self.update_brace_at(@brace2 , -1)
  end
  def update_brace_at( brace , side )
    brace.rotateZ(side*45 )
    brace.scale( @frame.size / 2, self.brace_length, @frame.size / 2)
    brace.position( -side*(self.brace_length*self.brace_cosm + self.brace_sin*@frame.size/4)  ,
                (self.brace_length*self.brace_sinm ) + 3*@frame.size/4,
                @frame.offset(@index))
  end
  def brace_rad
    return 45* Math.PI / 180
  end
  def brace_sin
    return Math.sin(self.brace_rad)
  end
  def brace_sinm
    return Math.sin(Math.PI/2 - self.brace_rad)
  end
  def brace_cosm
    return Math.cos(Math.PI/2 - self.brace_rad)
  end
  def brace_length
    return  @frame.sin * @frame.width / 4 - @frame.size/2
  end
  def rafter_length
    return  @frame.width/( 2 * @frame.cos)
  end
  def update_rafter_at(rafter , side)
    # rafter_length so the rafters meet at the bottom (?)
    rafter.rotateZ(side* (90 - @frame.angle)  )
    rafter.position( side * (@frame.width + @frame.cos*@frame.size) / 4  ,
                        @frame.tan*@frame.width/4 - @frame.cos*@frame.size/2  ,
                        @frame.offset(@index))
    rafter.scale( @frame.size / 2, self.rafter_length / 2,  @frame.size/ 2 )
  end
  def remove_parts()
    scene.remove(@rafter1)
    scene.remove(@rafter2)
    scene.remove(@king)
    scene.remove(@brace1)
    scene.remove(@brace2)
  end

end

class NoTruss
  def initialize( frame , index )
  end
  def update()
  end
  def remove()
  end
end
